Array, Object, Sets and JSON

1. Array:

An array is an ordered collection of values, where each value is identified by an index or a key.
Elements in an array can be of any data type, including numbers, strings, objects, etc.
Arrays are defined using square brackets [].

Example:
let myArray = [1, 'hello', { key: 'value' }];



2. Object:

An object is an unordered collection of key-value pairs. Each key is a string, and each value can be any data type.
Objects are defined using curly braces {}.
Accessing values in an object is done using the keys.

Example:
let myObject = { key1: 'value1', key2: 42, key3: { nestedKey: 'nestedValue' } };

3. Set:

A Set is an ordered collection of unique values, where each value must be unique.
Sets can include values of any data type, and they automatically eliminate duplicate values.
Sets are defined using the Set constructor.

Example:
let mySet = new Set([1, 2, 3, 3, 4, 5, 5]);

4. JSON (JavaScript Object Notation):

JSON is a data interchange format that is inspired by JavaScript object literal syntax but is not the same thing.
It's a text format for representing structured data and is often used to transmit data between a server and a web application.
JSON is a string, and it must follow a specific syntax with key-value pairs, using double quotes for keys.

Example:
{
  "name": "John",
  "age": 30,
  "city": "New York"
}

In summary, arrays and objects are native data structures in JavaScript for organizing and storing data, 
while sets are primarily used for managing unique values. JSON, on the other hand, is a data interchange format 
that can represent data structures similar to JavaScript objects but with a more constrained syntax for 
interoperability.